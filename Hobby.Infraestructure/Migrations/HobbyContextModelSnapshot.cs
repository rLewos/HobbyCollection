// <auto-generated />
using System;
using Games.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hobby.Infraestructure.Migrations
{
    [DbContext(typeof(HobbyContext))]
    partial class HobbyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Games.Model.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Developer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nm_Developer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Updated");

                    b.HasKey("Id")
                        .HasName("PK_Developer");

                    b.ToTable("Tb_Developer", (string)null);
                });

            modelBuilder.Entity("Games.Model.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Game");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nm_Game");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Release");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Updated");

                    b.HasKey("Id")
                        .HasName("PK_Game");

                    b.ToTable("Tb_Game", (string)null);
                });

            modelBuilder.Entity("Games.Model.Plataform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Plataform");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nm_Plataform");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Updated");

                    b.HasKey("Id")
                        .HasName("PK_Plataform");

                    b.ToTable("Tb_Plataform", (string)null);
                });

            modelBuilder.Entity("Games.Model.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Publisher");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nm_Publisher");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Updated");

                    b.HasKey("Id")
                        .HasName("PK_Publisher");

                    b.ToTable("Tb_Publisher", (string)null);
                });

            modelBuilder.Entity("Games.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_User");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nm_User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nm_Nickname");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dat_Updated");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("Tb_User", (string)null);
                });

            modelBuilder.Entity("Tb_GameDeveloper", b =>
                {
                    b.Property<int>("DeveloperListId")
                        .HasColumnType("int");

                    b.Property<int>("GameListId")
                        .HasColumnType("int");

                    b.HasKey("DeveloperListId", "GameListId");

                    b.HasIndex("GameListId");

                    b.ToTable("Tb_GameDeveloper");
                });

            modelBuilder.Entity("Tb_GamePlataform", b =>
                {
                    b.Property<int>("GameListId")
                        .HasColumnType("int");

                    b.Property<int>("PlataformListId")
                        .HasColumnType("int");

                    b.HasKey("GameListId", "PlataformListId");

                    b.HasIndex("PlataformListId");

                    b.ToTable("Tb_GamePlataform");
                });

            modelBuilder.Entity("Tb_GamePublisher", b =>
                {
                    b.Property<int>("GameListId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherListId")
                        .HasColumnType("int");

                    b.HasKey("GameListId", "PublisherListId");

                    b.HasIndex("PublisherListId");

                    b.ToTable("Tb_GamePublisher");
                });

            modelBuilder.Entity("Tb_UserGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBeaten")
                        .HasColumnType("bit")
                        .HasColumnName("has_Beaten");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Tb_UserGame");
                });

            modelBuilder.Entity("Tb_GameDeveloper", b =>
                {
                    b.HasOne("Games.Model.Developer", null)
                        .WithMany()
                        .HasForeignKey("DeveloperListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Games.Model.Game", null)
                        .WithMany()
                        .HasForeignKey("GameListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tb_GamePlataform", b =>
                {
                    b.HasOne("Games.Model.Game", null)
                        .WithMany()
                        .HasForeignKey("GameListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Games.Model.Plataform", null)
                        .WithMany()
                        .HasForeignKey("PlataformListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tb_GamePublisher", b =>
                {
                    b.HasOne("Games.Model.Game", null)
                        .WithMany()
                        .HasForeignKey("GameListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Games.Model.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublisherListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tb_UserGame", b =>
                {
                    b.HasOne("Games.Model.Game", "Game")
                        .WithMany("UserGameList")
                        .HasForeignKey("GameId");

                    b.HasOne("Games.Model.User", "User")
                        .WithMany("UserGameList")
                        .HasForeignKey("UserId");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Games.Model.Game", b =>
                {
                    b.Navigation("UserGameList");
                });

            modelBuilder.Entity("Games.Model.User", b =>
                {
                    b.Navigation("UserGameList");
                });
#pragma warning restore 612, 618
        }
    }
}
